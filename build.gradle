plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.1'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'jacoco'

}


group = 'com.study'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}


configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

jar {
    enabled = false
}
repositories {
    mavenCentral()
}

tasks.withType(JavaCompile) {
    options.compilerArgs << "-parameters"
}


dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    compileOnly 'org.projectlombok:lombok'
//    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'com.mysql:mysql-connector-j'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'


    //security
    testImplementation 'org.springframework.security:spring-security-test'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'


    //jwt
    implementation group: 'io.jsonwebtoken', name: 'jjwt-api', version: '0.11.5'
    runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-impl', version: '0.11.5'
    runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-jackson', version: '0.11.5'

    //swagger
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0'
//    implementation group: 'io.springfox', name: 'springfox-boot-starter', version: '3.0.0'


    // redis
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.session:spring-session-data-redis'

    //querydsl
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"
//    testImplementation 'org.mockito:mockito-core:5.8.0'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'


    // https://mvnrepository.com/artifact/io.github.cdimascio/dotenv-java
    implementation("me.paulschwarz:spring-dotenv:3.0.0")




}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport

}
jacoco {
    toolVersion = '0.8.7'
}
jacocoTestReport {
    dependsOn test

    reports {
        xml.required.set(true)
        html.required.set(true)

        // QueryDSL Q클래스 제외
        def Qdomains = []
        for (qPattern in "**/QA".."**/QZ") {
            Qdomains.add(qPattern + "*")
        }

        afterEvaluate {
            classDirectories.setFrom(files(classDirectories.files.collect {
                fileTree(dir: it,
                        exclude: [
                                "**/InitData*",
                                  "**/global/**"
                        ,"**/*Application*"] + Qdomains)
            }))
        }

//        xml.destination file("${buildDir}/jacoco/index.xml")
//        html.destination file("${buildDir}/jacoco/index.html")
    }
}




//Querydsl 추가,   동 생성된 Q클래스 gradle clean으로 제거
clean {
    delete file('src/main/generated')
}




jacocoTestCoverageVerification {
    violationRules {
        rule {
            enabled = true;
            element = 'CLASS'

            // 라인 커버리지 제한을 90%로 설정
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.80
            }

            excludes = [
                    '**.InitData*',
                    '**.*Application',
                    '**.domain.**',
                    '**.global.**'

            ]
        }

    }
}
