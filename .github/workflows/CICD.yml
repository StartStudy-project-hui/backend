name: Spring Boot & Gradle CI/CD 

# master branch에 push 또는 pull request가 발생할 경우 동작
# branch 단위 외에도, tag나 cron 식 등을 사용할 수 있음
#            sudo docker-compose down
#            sudo docker-compose down --rmi all
#            docker-compose up --force-recreate --build -d

#            docker stop backend
#            docker rm backend

on:
  push:
    branches: [ develop ]
  pull_request:
    branches: [ develop ]

jobs:
  build:
    # 실행 환경 지정
    runs-on: ubuntu-latest

    # Task의 sequence를 명시한다.
    steps:
    - uses: actions/checkout@v2
    
    - name: Set up JDK 17
      uses: actions/setup-java@v1
      with:
        java-version: 17
    
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    - name: Execute Gradle build
      run: ./gradlew clean build -x test


    - name: Set up Docker Build
      uses: docker/setup-buildx-action@v2
      
    - name: Login to DockerHub
      uses: docker/login-action@v1
      with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build Docker
      run: docker build --platform linux/amd64 -t ${{ secrets.DOCKERHUB_USERNAME }}/study_project .
    - name: Push Docker
      run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/study_project:latest
    
  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Docker run
        uses: appleboy/ssh-action@master
        with:
          username: ubuntu
          host: ${{ secrets.LIVE_SERVER_IP }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script_stop: true
          script: |
            cd Backend
            git pull
            docker stop backend
            docker rm backend
            docker rmi -f backend

            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/study_project:latest
            docker run -d --name backend -p 8080:8080 ${{ secrets.DOCKERHUB_USERNAME }}/study_project:latest
            sudo docker image prune -f

            

